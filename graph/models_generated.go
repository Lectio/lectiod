// This file was generated by github.com/vektah/gqlgen, DO NOT EDIT

package graph

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
)

type Configuration struct {
	Storage *StorageConfiguration           `json:"storage"`
	Harvest *HarvestDirectivesConfiguration `json:"harvest"`
	Errors  []string                        `json:"errors"`
}
type FileStorageConfiguration struct {
	BasePath string `json:"basePath"`
}
type HarvestDirectivesConfiguration struct {
	IgnoreURLsRegExprs        []string `json:"ignoreURLsRegExprs"`
	RemoveParamsFromURLsRegEx []string `json:"removeParamsFromURLsRegEx"`
	FollowHTMLRedirects       bool     `json:"followHTMLRedirects"`
}
type HarvestedResource struct {
	Urls           HarvestedResourceUrls `json:"urls"`
	IsHTMLRedirect bool                  `json:"isHTMLRedirect"`
	IsCleaned      bool                  `json:"isCleaned"`
	RedirectURL    *string               `json:"redirectURL"`
}
type HarvestedResourceUrls struct {
	Original string `json:"original"`
	Final    string `json:"final"`
	Cleaned  string `json:"cleaned"`
	Resolved string `json:"resolved"`
}
type HarvestedResources struct {
	Text      string                `json:"text"`
	Harvested []HarvestedResource   `json:"harvested"`
	Ignored   []IgnoredResource     `json:"ignored"`
	Invalid   []UnharvestedResource `json:"invalid"`
}
type IgnoredResource struct {
	Urls   HarvestedResourceUrls `json:"urls"`
	Reason string                `json:"reason"`
}
type Party interface{}
type StorageConfiguration struct {
	Type    StorageType               `json:"type"`
	Filesys *FileStorageConfiguration `json:"filesys"`
}
type UnharvestedResource struct {
	Url    string `json:"url"`
	Reason string `json:"reason"`
}

type StorageType string

const (
	StorageTypeFileSystem StorageType = "FILE_SYSTEM"
)

func (e StorageType) IsValid() bool {
	switch e {
	case StorageTypeFileSystem:
		return true
	}
	return false
}

func (e StorageType) String() string {
	return string(e)
}

func (e *StorageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StorageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StorageType", str)
	}
	return nil
}

func (e StorageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
