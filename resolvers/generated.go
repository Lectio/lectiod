// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package resolvers

import (
	"bytes"
	context "context"
	fmt "fmt"
	strconv "strconv"

	graphql "github.com/99designs/gqlgen/graphql"
	introspection "github.com/99designs/gqlgen/graphql/introspection"
	models "github.com/lectio/lectiod/models"
	gqlparser "github.com/vektah/gqlparser"
	ast "github.com/vektah/gqlparser/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}
type MutationResolver interface {
	EstablishSimulatedSession(ctx context.Context, authorization models.PrivilegedAuthorizationInput, settings models.SettingsBundleName) (models.AuthenticatedSession, error)
	RefreshSession(ctx context.Context, privilegedAuthz models.PrivilegedAuthorizationInput, authorization models.AuthorizationInput) (models.AuthenticatedSession, error)
	DestroySession(ctx context.Context, privilegedAuthz models.PrivilegedAuthorizationInput, authorization models.AuthorizationInput) (bool, error)
	DestroyAllSessions(ctx context.Context, authorization models.PrivilegedAuthorizationInput) (models.AuthenticatedSessionsCount, error)
	SaveURLsinText(ctx context.Context, authorization models.AuthorizationInput, destination models.StorageDestinationInput, text models.LargeText) (*models.HarvestedResources, error)
}
type QueryResolver interface {
	AsymmetricCryptoPublicKey(ctx context.Context, claimType models.AuthorizationClaimType, keyId models.AsymmetricCryptoPublicKeyName) (models.AuthorizationClaimCryptoKey, error)
	AsymmetricCryptoPublicKeys(ctx context.Context, claimType *models.AuthorizationClaimType) ([]*models.AuthorizationClaimCryptoKey, error)
	SettingsBundles(ctx context.Context, authorization models.PrivilegedAuthorizationInput) ([]*models.SettingsBundle, error)
	SettingsBundle(ctx context.Context, authorization models.PrivilegedAuthorizationInput, name models.SettingsBundleName) (*models.SettingsBundle, error)
	UrlsInText(ctx context.Context, authorization models.AuthorizationInput, text models.LargeText) (*models.HarvestedResources, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Query(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Query(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Mutation(ctx context.Context, op *ast.OperationDefinition) *graphql.Response {
	ec := executionContext{graphql.GetRequestContext(ctx), e}

	buf := ec.RequestMiddleware(ctx, func(ctx context.Context) []byte {
		data := ec._Mutation(ctx, op.SelectionSet)
		var buf bytes.Buffer
		data.MarshalGQL(&buf)
		return buf.Bytes()
	})

	return &graphql.Response{
		Data:   buf,
		Errors: ec.Errors,
	}
}

func (e *executableSchema) Subscription(ctx context.Context, op *ast.OperationDefinition) func() *graphql.Response {
	return graphql.OneShot(graphql.ErrorResponse(ctx, "subscriptions are not supported"))
}

type executionContext struct {
	*graphql.RequestContext
	*executableSchema
}

var fileStorageSettingsImplementors = []string{"FileStorageSettings"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _FileStorageSettings(ctx context.Context, sel ast.SelectionSet, obj *models.FileStorageSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, fileStorageSettingsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FileStorageSettings")
		case "basePath":
			out.Values[i] = ec._FileStorageSettings_basePath(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _FileStorageSettings_basePath(ctx context.Context, field graphql.CollectedField, obj *models.FileStorageSettings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "FileStorageSettings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.BasePath, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.DirectoryPath)
	return res
}

var harvestDirectivesSettingsImplementors = []string{"HarvestDirectivesSettings"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _HarvestDirectivesSettings(ctx context.Context, sel ast.SelectionSet, obj *models.HarvestDirectivesSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, harvestDirectivesSettingsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HarvestDirectivesSettings")
		case "ignoreURLsRegExprs":
			out.Values[i] = ec._HarvestDirectivesSettings_ignoreURLsRegExprs(ctx, field, obj)
		case "removeParamsFromURLsRegEx":
			out.Values[i] = ec._HarvestDirectivesSettings_removeParamsFromURLsRegEx(ctx, field, obj)
		case "followHTMLRedirects":
			out.Values[i] = ec._HarvestDirectivesSettings_followHTMLRedirects(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _HarvestDirectivesSettings_ignoreURLsRegExprs(ctx context.Context, field graphql.CollectedField, obj *models.HarvestDirectivesSettings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestDirectivesSettings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IgnoreURLsRegExprs, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.RegularExpression)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return *res[idx1]
		}())
	}
	return arr1
}

func (ec *executionContext) _HarvestDirectivesSettings_removeParamsFromURLsRegEx(ctx context.Context, field graphql.CollectedField, obj *models.HarvestDirectivesSettings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestDirectivesSettings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RemoveParamsFromURLsRegEx, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.RegularExpression)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return *res[idx1]
		}())
	}
	return arr1
}

func (ec *executionContext) _HarvestDirectivesSettings_followHTMLRedirects(ctx context.Context, field graphql.CollectedField, obj *models.HarvestDirectivesSettings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestDirectivesSettings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FollowHTMLRedirects, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

var harvestedResourceImplementors = []string{"HarvestedResource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _HarvestedResource(ctx context.Context, sel ast.SelectionSet, obj *models.HarvestedResource) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, harvestedResourceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HarvestedResource")
		case "urls":
			out.Values[i] = ec._HarvestedResource_urls(ctx, field, obj)
		case "isHTMLRedirect":
			out.Values[i] = ec._HarvestedResource_isHTMLRedirect(ctx, field, obj)
		case "isCleaned":
			out.Values[i] = ec._HarvestedResource_isCleaned(ctx, field, obj)
		case "redirectURL":
			out.Values[i] = ec._HarvestedResource_redirectURL(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _HarvestedResource_urls(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Urls, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.HarvestedResourceUrls)
	return ec._HarvestedResourceUrls(ctx, field.Selections, &res)
}

func (ec *executionContext) _HarvestedResource_isHTMLRedirect(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsHTMLRedirect, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _HarvestedResource_isCleaned(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsCleaned, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _HarvestedResource_redirectURL(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.RedirectURL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.URLText)
	if res == nil {
		return graphql.Null
	}
	return *res
}

var harvestedResourceUrlsImplementors = []string{"HarvestedResourceUrls"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _HarvestedResourceUrls(ctx context.Context, sel ast.SelectionSet, obj *models.HarvestedResourceUrls) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, harvestedResourceUrlsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HarvestedResourceUrls")
		case "original":
			out.Values[i] = ec._HarvestedResourceUrls_original(ctx, field, obj)
		case "final":
			out.Values[i] = ec._HarvestedResourceUrls_final(ctx, field, obj)
		case "cleaned":
			out.Values[i] = ec._HarvestedResourceUrls_cleaned(ctx, field, obj)
		case "resolved":
			out.Values[i] = ec._HarvestedResourceUrls_resolved(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _HarvestedResourceUrls_original(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResourceUrls) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResourceUrls"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Original, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.URLText)
	return res
}

func (ec *executionContext) _HarvestedResourceUrls_final(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResourceUrls) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResourceUrls"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Final, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.URLText)
	return res
}

func (ec *executionContext) _HarvestedResourceUrls_cleaned(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResourceUrls) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResourceUrls"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Cleaned, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.URLText)
	return res
}

func (ec *executionContext) _HarvestedResourceUrls_resolved(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResourceUrls) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResourceUrls"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Resolved, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.URLText)
	return res
}

var harvestedResourcesImplementors = []string{"HarvestedResources"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _HarvestedResources(ctx context.Context, sel ast.SelectionSet, obj *models.HarvestedResources) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, harvestedResourcesImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HarvestedResources")
		case "text":
			out.Values[i] = ec._HarvestedResources_text(ctx, field, obj)
		case "harvested":
			out.Values[i] = ec._HarvestedResources_harvested(ctx, field, obj)
		case "ignored":
			out.Values[i] = ec._HarvestedResources_ignored(ctx, field, obj)
		case "invalid":
			out.Values[i] = ec._HarvestedResources_invalid(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _HarvestedResources_text(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResources) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResources"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Text, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.LargeText)
	return res
}

func (ec *executionContext) _HarvestedResources_harvested(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResources) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResources"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Harvested, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.HarvestedResource)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._HarvestedResource(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _HarvestedResources_ignored(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResources) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResources"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Ignored, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.IgnoredResource)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._IgnoredResource(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _HarvestedResources_invalid(ctx context.Context, field graphql.CollectedField, obj *models.HarvestedResources) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "HarvestedResources"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Invalid, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.UnharvestedResource)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._UnharvestedResource(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var ignoredResourceImplementors = []string{"IgnoredResource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _IgnoredResource(ctx context.Context, sel ast.SelectionSet, obj *models.IgnoredResource) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, ignoredResourceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IgnoredResource")
		case "urls":
			out.Values[i] = ec._IgnoredResource_urls(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._IgnoredResource_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _IgnoredResource_urls(ctx context.Context, field graphql.CollectedField, obj *models.IgnoredResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "IgnoredResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Urls, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.HarvestedResourceUrls)
	return ec._HarvestedResourceUrls(ctx, field.Selections, &res)
}

func (ec *executionContext) _IgnoredResource_reason(ctx context.Context, field graphql.CollectedField, obj *models.IgnoredResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "IgnoredResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.SmallText)
	return res
}

var mutationImplementors = []string{"Mutation"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, mutationImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Mutation",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "establishSimulatedSession":
			out.Values[i] = ec._Mutation_establishSimulatedSession(ctx, field)
		case "refreshSession":
			out.Values[i] = ec._Mutation_refreshSession(ctx, field)
		case "destroySession":
			out.Values[i] = ec._Mutation_destroySession(ctx, field)
		case "destroyAllSessions":
			out.Values[i] = ec._Mutation_destroyAllSessions(ctx, field)
		case "saveURLsinText":
			out.Values[i] = ec._Mutation_saveURLsinText(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Mutation_establishSimulatedSession(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.PrivilegedAuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg0, err = UnmarshalPrivilegedAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg0
	var arg1 models.SettingsBundleName
	if tmp, ok := rawArgs["settings"]; ok {
		var err error
		err = (&arg1).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["settings"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().EstablishSimulatedSession(ctx, args["authorization"].(models.PrivilegedAuthorizationInput), args["settings"].(models.SettingsBundleName))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.AuthenticatedSession)
	return ec._AuthenticatedSession(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_refreshSession(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.PrivilegedAuthorizationInput
	if tmp, ok := rawArgs["privilegedAuthz"]; ok {
		var err error
		arg0, err = UnmarshalPrivilegedAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["privilegedAuthz"] = arg0
	var arg1 models.AuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg1, err = UnmarshalAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().RefreshSession(ctx, args["privilegedAuthz"].(models.PrivilegedAuthorizationInput), args["authorization"].(models.AuthorizationInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.AuthenticatedSession)
	return ec._AuthenticatedSession(ctx, field.Selections, &res)
}

func (ec *executionContext) _Mutation_destroySession(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.PrivilegedAuthorizationInput
	if tmp, ok := rawArgs["privilegedAuthz"]; ok {
		var err error
		arg0, err = UnmarshalPrivilegedAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["privilegedAuthz"] = arg0
	var arg1 models.AuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg1, err = UnmarshalAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg1
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().DestroySession(ctx, args["privilegedAuthz"].(models.PrivilegedAuthorizationInput), args["authorization"].(models.AuthorizationInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) _Mutation_destroyAllSessions(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.PrivilegedAuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg0, err = UnmarshalPrivilegedAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().DestroyAllSessions(ctx, args["authorization"].(models.PrivilegedAuthorizationInput))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.AuthenticatedSessionsCount)
	return res
}

func (ec *executionContext) _Mutation_saveURLsinText(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.AuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg0, err = UnmarshalAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg0
	var arg1 models.StorageDestinationInput
	if tmp, ok := rawArgs["destination"]; ok {
		var err error
		arg1, err = UnmarshalStorageDestinationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["destination"] = arg1
	var arg2 models.LargeText
	if tmp, ok := rawArgs["text"]; ok {
		var err error
		err = (&arg2).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["text"] = arg2
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Mutation"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.resolvers.Mutation().SaveURLsinText(ctx, args["authorization"].(models.AuthorizationInput), args["destination"].(models.StorageDestinationInput), args["text"].(models.LargeText))
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.HarvestedResources)
	if res == nil {
		return graphql.Null
	}
	return ec._HarvestedResources(ctx, field.Selections, res)
}

var organizationImplementors = []string{"Organization", "Party"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *models.Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, organizationImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "id":
			out.Values[i] = ec._Organization_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Organization_name(ctx, field, obj)
		case "units":
			out.Values[i] = ec._Organization_units(ctx, field, obj)
		case "services":
			out.Values[i] = ec._Organization_services(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Organization_id(ctx context.Context, field graphql.CollectedField, obj *models.Organization) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Organization"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Organization_name(ctx context.Context, field graphql.CollectedField, obj *models.Organization) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Organization"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.NameText)
	return res
}

func (ec *executionContext) _Organization_units(ctx context.Context, field graphql.CollectedField, obj *models.Organization) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Organization"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Units, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.OrganizationalUnit)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._OrganizationalUnit(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Organization_services(ctx context.Context, field graphql.CollectedField, obj *models.Organization) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Organization"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Services, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ServiceIdentity)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._ServiceIdentity(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var organizationalUnitImplementors = []string{"OrganizationalUnit", "Party"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _OrganizationalUnit(ctx context.Context, sel ast.SelectionSet, obj *models.OrganizationalUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, organizationalUnitImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationalUnit")
		case "id":
			out.Values[i] = ec._OrganizationalUnit_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._OrganizationalUnit_name(ctx, field, obj)
		case "units":
			out.Values[i] = ec._OrganizationalUnit_units(ctx, field, obj)
		case "services":
			out.Values[i] = ec._OrganizationalUnit_services(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _OrganizationalUnit_id(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationalUnit) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizationalUnit"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _OrganizationalUnit_name(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationalUnit) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizationalUnit"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.NameText)
	return res
}

func (ec *executionContext) _OrganizationalUnit_units(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationalUnit) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizationalUnit"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Units, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.OrganizationalUnit)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._OrganizationalUnit(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _OrganizationalUnit_services(ctx context.Context, field graphql.CollectedField, obj *models.OrganizationalUnit) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "OrganizationalUnit"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Services, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ServiceIdentity)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._ServiceIdentity(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var personImplementors = []string{"Person", "Party"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Person(ctx context.Context, sel ast.SelectionSet, obj *models.Person) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, personImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Person")
		case "id":
			out.Values[i] = ec._Person_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Person_name(ctx, field, obj)
		case "firstName":
			out.Values[i] = ec._Person_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._Person_lastName(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Person_users(ctx, field, obj)
		case "services":
			out.Values[i] = ec._Person_services(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Person_id(ctx context.Context, field graphql.CollectedField, obj *models.Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Person_name(ctx context.Context, field graphql.CollectedField, obj *models.Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.NameText)
	return res
}

func (ec *executionContext) _Person_firstName(ctx context.Context, field graphql.CollectedField, obj *models.Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.FirstName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.NameText)
	return res
}

func (ec *executionContext) _Person_lastName(ctx context.Context, field graphql.CollectedField, obj *models.Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.LastName, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.NameText)
	return res
}

func (ec *executionContext) _Person_users(ctx context.Context, field graphql.CollectedField, obj *models.Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Users, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.UserIdentity)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._UserIdentity(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) _Person_services(ctx context.Context, field graphql.CollectedField, obj *models.Person) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Person"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Services, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ServiceIdentity)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return ec._ServiceIdentity(ctx, field.Selections, res[idx1])
		}())
	}
	return arr1
}

var queryImplementors = []string{"Query"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, queryImplementors)

	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
	})

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "asymmetricCryptoPublicKey":
			out.Values[i] = ec._Query_asymmetricCryptoPublicKey(ctx, field)
		case "asymmetricCryptoPublicKeys":
			out.Values[i] = ec._Query_asymmetricCryptoPublicKeys(ctx, field)
		case "settingsBundles":
			out.Values[i] = ec._Query_settingsBundles(ctx, field)
		case "settingsBundle":
			out.Values[i] = ec._Query_settingsBundle(ctx, field)
		case "urlsInText":
			out.Values[i] = ec._Query_urlsInText(ctx, field)
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Query_asymmetricCryptoPublicKey(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.AuthorizationClaimType
	if tmp, ok := rawArgs["claimType"]; ok {
		var err error
		err = (&arg0).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["claimType"] = arg0
	var arg1 models.AsymmetricCryptoPublicKeyName
	if tmp, ok := rawArgs["keyId"]; ok {
		var err error
		err = (&arg1).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["keyId"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().AsymmetricCryptoPublicKey(ctx, args["claimType"].(models.AuthorizationClaimType), args["keyId"].(models.AsymmetricCryptoPublicKeyName))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(models.AuthorizationClaimCryptoKey)
		return ec._AuthorizationClaimCryptoKey(ctx, field.Selections, &res)
	})
}

func (ec *executionContext) _Query_asymmetricCryptoPublicKeys(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 *models.AuthorizationClaimType
	if tmp, ok := rawArgs["claimType"]; ok {
		var err error
		var ptr1 models.AuthorizationClaimType
		if tmp != nil {
			err = (&ptr1).UnmarshalGQL(tmp)
			arg0 = &ptr1
		}

		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["claimType"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().AsymmetricCryptoPublicKeys(ctx, args["claimType"].(*models.AuthorizationClaimType))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*models.AuthorizationClaimCryptoKey)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._AuthorizationClaimCryptoKey(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_settingsBundles(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.PrivilegedAuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg0, err = UnmarshalPrivilegedAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg0
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().SettingsBundles(ctx, args["authorization"].(models.PrivilegedAuthorizationInput))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.([]*models.SettingsBundle)
		arr1 := graphql.Array{}
		for idx1 := range res {
			arr1 = append(arr1, func() graphql.Marshaler {
				rctx := graphql.GetResolverContext(ctx)
				rctx.PushIndex(idx1)
				defer rctx.Pop()
				if res[idx1] == nil {
					return graphql.Null
				}
				return ec._SettingsBundle(ctx, field.Selections, res[idx1])
			}())
		}
		return arr1
	})
}

func (ec *executionContext) _Query_settingsBundle(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.PrivilegedAuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg0, err = UnmarshalPrivilegedAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg0
	var arg1 models.SettingsBundleName
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		err = (&arg1).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().SettingsBundle(ctx, args["authorization"].(models.PrivilegedAuthorizationInput), args["name"].(models.SettingsBundleName))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*models.SettingsBundle)
		if res == nil {
			return graphql.Null
		}
		return ec._SettingsBundle(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query_urlsInText(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 models.AuthorizationInput
	if tmp, ok := rawArgs["authorization"]; ok {
		var err error
		arg0, err = UnmarshalAuthorizationInput(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["authorization"] = arg0
	var arg1 models.LargeText
	if tmp, ok := rawArgs["text"]; ok {
		var err error
		err = (&arg1).UnmarshalGQL(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["text"] = arg1
	ctx = graphql.WithResolverContext(ctx, &graphql.ResolverContext{
		Object: "Query",
		Args:   args,
		Field:  field,
	})
	return graphql.Defer(func() (ret graphql.Marshaler) {
		defer func() {
			if r := recover(); r != nil {
				userErr := ec.Recover(ctx, r)
				ec.Error(ctx, userErr)
				ret = graphql.Null
			}
		}()

		resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
			return ec.resolvers.Query().UrlsInText(ctx, args["authorization"].(models.AuthorizationInput), args["text"].(models.LargeText))
		})
		if resTmp == nil {
			return graphql.Null
		}
		res := resTmp.(*models.HarvestedResources)
		if res == nil {
			return graphql.Null
		}
		return ec._HarvestedResources(ctx, field.Selections, res)
	})
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		var err error
		arg0, err = graphql.UnmarshalString(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["name"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectType(args["name"].(string)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Query"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return ec.introspectSchema(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	if res == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, field.Selections, res)
}

var serviceIdentityImplementors = []string{"ServiceIdentity", "AuthenticationIdentity"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _ServiceIdentity(ctx context.Context, sel ast.SelectionSet, obj *models.ServiceIdentity) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, serviceIdentityImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceIdentity")
		case "id":
			out.Values[i] = ec._ServiceIdentity_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._ServiceIdentity_type(ctx, field, obj)
		case "principal":
			out.Values[i] = ec._ServiceIdentity_principal(ctx, field, obj)
		case "key":
			out.Values[i] = ec._ServiceIdentity_key(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _ServiceIdentity_id(ctx context.Context, field graphql.CollectedField, obj *models.ServiceIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _ServiceIdentity_type(ctx context.Context, field graphql.CollectedField, obj *models.ServiceIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.AuthenticationType)
	return res
}

func (ec *executionContext) _ServiceIdentity_principal(ctx context.Context, field graphql.CollectedField, obj *models.ServiceIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Principal, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.IdentityPrincipal)
	return res
}

func (ec *executionContext) _ServiceIdentity_key(ctx context.Context, field graphql.CollectedField, obj *models.ServiceIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "ServiceIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Key, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.IdentityKey)
	return res
}

var settingsBundleImplementors = []string{"SettingsBundle"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _SettingsBundle(ctx context.Context, sel ast.SelectionSet, obj *models.SettingsBundle) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, settingsBundleImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SettingsBundle")
		case "name":
			out.Values[i] = ec._SettingsBundle_name(ctx, field, obj)
		case "storage":
			out.Values[i] = ec._SettingsBundle_storage(ctx, field, obj)
		case "harvest":
			out.Values[i] = ec._SettingsBundle_harvest(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._SettingsBundle_errors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _SettingsBundle_name(ctx context.Context, field graphql.CollectedField, obj *models.SettingsBundle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "SettingsBundle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.SettingsBundleName)
	return res
}

func (ec *executionContext) _SettingsBundle_storage(ctx context.Context, field graphql.CollectedField, obj *models.SettingsBundle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "SettingsBundle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Storage, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.StorageSettings)
	return ec._StorageSettings(ctx, field.Selections, &res)
}

func (ec *executionContext) _SettingsBundle_harvest(ctx context.Context, field graphql.CollectedField, obj *models.SettingsBundle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "SettingsBundle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Harvest, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.HarvestDirectivesSettings)
	return ec._HarvestDirectivesSettings(ctx, field.Selections, &res)
}

func (ec *executionContext) _SettingsBundle_errors(ctx context.Context, field graphql.CollectedField, obj *models.SettingsBundle) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "SettingsBundle"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Errors, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*models.ErrorMessage)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			if res[idx1] == nil {
				return graphql.Null
			}
			return *res[idx1]
		}())
	}
	return arr1
}

var storageSettingsImplementors = []string{"StorageSettings"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _StorageSettings(ctx context.Context, sel ast.SelectionSet, obj *models.StorageSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, storageSettingsImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StorageSettings")
		case "type":
			out.Values[i] = ec._StorageSettings_type(ctx, field, obj)
		case "filesys":
			out.Values[i] = ec._StorageSettings_filesys(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _StorageSettings_type(ctx context.Context, field graphql.CollectedField, obj *models.StorageSettings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StorageSettings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.StorageType)
	return res
}

func (ec *executionContext) _StorageSettings_filesys(ctx context.Context, field graphql.CollectedField, obj *models.StorageSettings) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "StorageSettings"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Filesys, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*models.FileStorageSettings)
	if res == nil {
		return graphql.Null
	}
	return ec._FileStorageSettings(ctx, field.Selections, res)
}

var tenantImplementors = []string{"Tenant", "Party"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _Tenant(ctx context.Context, sel ast.SelectionSet, obj *models.Tenant) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, tenantImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tenant")
		case "id":
			out.Values[i] = ec._Tenant_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Tenant_name(ctx, field, obj)
		case "org":
			out.Values[i] = ec._Tenant_org(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _Tenant_id(ctx context.Context, field graphql.CollectedField, obj *models.Tenant) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Tenant"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _Tenant_name(ctx context.Context, field graphql.CollectedField, obj *models.Tenant) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Tenant"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.NameText)
	return res
}

func (ec *executionContext) _Tenant_org(ctx context.Context, field graphql.CollectedField, obj *models.Tenant) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "Tenant"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Org, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Organization)
	return ec._Organization(ctx, field.Selections, &res)
}

var unharvestedResourceImplementors = []string{"UnharvestedResource"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UnharvestedResource(ctx context.Context, sel ast.SelectionSet, obj *models.UnharvestedResource) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, unharvestedResourceImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UnharvestedResource")
		case "url":
			out.Values[i] = ec._UnharvestedResource_url(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._UnharvestedResource_reason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _UnharvestedResource_url(ctx context.Context, field graphql.CollectedField, obj *models.UnharvestedResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UnharvestedResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.URL, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.URLText)
	return res
}

func (ec *executionContext) _UnharvestedResource_reason(ctx context.Context, field graphql.CollectedField, obj *models.UnharvestedResource) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UnharvestedResource"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Reason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.SmallText)
	return res
}

var userIdentityImplementors = []string{"UserIdentity", "AuthenticationIdentity"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) _UserIdentity(ctx context.Context, sel ast.SelectionSet, obj *models.UserIdentity) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, userIdentityImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserIdentity")
		case "id":
			out.Values[i] = ec._UserIdentity_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._UserIdentity_type(ctx, field, obj)
		case "principal":
			out.Values[i] = ec._UserIdentity_principal(ctx, field, obj)
		case "password":
			out.Values[i] = ec._UserIdentity_password(ctx, field, obj)
		case "person":
			out.Values[i] = ec._UserIdentity_person(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) _UserIdentity_id(ctx context.Context, field graphql.CollectedField, obj *models.UserIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.ID, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalID(res)
}

func (ec *executionContext) _UserIdentity_type(ctx context.Context, field graphql.CollectedField, obj *models.UserIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.AuthenticationType)
	return res
}

func (ec *executionContext) _UserIdentity_principal(ctx context.Context, field graphql.CollectedField, obj *models.UserIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Principal, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.IdentityPrincipal)
	return res
}

func (ec *executionContext) _UserIdentity_password(ctx context.Context, field graphql.CollectedField, obj *models.UserIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Password, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.IdentityPassword)
	return res
}

func (ec *executionContext) _UserIdentity_person(ctx context.Context, field graphql.CollectedField, obj *models.UserIdentity) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "UserIdentity"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Person, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(models.Person)
	return ec._Person(ctx, field.Selections, &res)
}

var __DirectiveImplementors = []string{"__Directive"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __DirectiveImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Locations, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return graphql.MarshalString(res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Directive"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __EnumValueImplementors = []string{"__EnumValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __EnumValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__EnumValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __FieldImplementors = []string{"__Field"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __FieldImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Args, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.IsDeprecated, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(bool)
	return graphql.MarshalBoolean(res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Field"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DeprecationReason, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

var __InputValueImplementors = []string{"__InputValue"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __InputValueImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Type, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__InputValue"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.DefaultValue, nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	if res == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*res)
}

var __SchemaImplementors = []string{"__Schema"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __SchemaImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Types(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.QueryType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.MutationType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.SubscriptionType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Schema"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Directives(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Directive(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

var __TypeImplementors = []string{"__Type"}

// nolint: gocyclo, errcheck, gas, goconst
func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ctx, sel, __TypeImplementors)

	out := graphql.NewOrderedMap(len(fields))
	for i, field := range fields {
		out.Keys[i] = field.Alias

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}

	return out
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Kind(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Name(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Description(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	return graphql.MarshalString(res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Field(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.Interfaces(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.PossibleTypes(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___Type(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rawArgs := field.ArgumentMap(ec.Variables)
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		var err error
		arg0, err = graphql.UnmarshalBoolean(tmp)
		if err != nil {
			ec.Error(ctx, err)
			return graphql.Null
		}
	}
	args["includeDeprecated"] = arg0
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = args
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___EnumValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.InputFields(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	arr1 := graphql.Array{}
	for idx1 := range res {
		arr1 = append(arr1, func() graphql.Marshaler {
			rctx := graphql.GetResolverContext(ctx)
			rctx.PushIndex(idx1)
			defer rctx.Pop()
			return ec.___InputValue(ctx, field.Selections, &res[idx1])
		}())
	}
	return arr1
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) graphql.Marshaler {
	rctx := graphql.GetResolverContext(ctx)
	rctx.Object = "__Type"
	rctx.Args = nil
	rctx.Field = field
	rctx.PushField(field.Alias)
	defer rctx.Pop()
	resTmp := ec.FieldMiddleware(ctx, func(ctx context.Context) (interface{}, error) {
		return obj.OfType(), nil
	})
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	if res == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, field.Selections, res)
}

func (ec *executionContext) _AuthenticatedSession(ctx context.Context, sel ast.SelectionSet, obj *models.AuthenticatedSession) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _AuthenticationIdentity(ctx context.Context, sel ast.SelectionSet, obj *models.AuthenticationIdentity) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case models.UserIdentity:
		return ec._UserIdentity(ctx, sel, &obj)
	case *models.UserIdentity:
		return ec._UserIdentity(ctx, sel, obj)
	case models.ServiceIdentity:
		return ec._ServiceIdentity(ctx, sel, &obj)
	case *models.ServiceIdentity:
		return ec._ServiceIdentity(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _AuthorizationClaimCryptoKey(ctx context.Context, sel ast.SelectionSet, obj *models.AuthorizationClaimCryptoKey) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func (ec *executionContext) _Party(ctx context.Context, sel ast.SelectionSet, obj *models.Party) graphql.Marshaler {
	switch obj := (*obj).(type) {
	case nil:
		return graphql.Null
	case models.Person:
		return ec._Person(ctx, sel, &obj)
	case *models.Person:
		return ec._Person(ctx, sel, obj)
	case models.OrganizationalUnit:
		return ec._OrganizationalUnit(ctx, sel, &obj)
	case *models.OrganizationalUnit:
		return ec._OrganizationalUnit(ctx, sel, obj)
	case models.Organization:
		return ec._Organization(ctx, sel, &obj)
	case *models.Organization:
		return ec._Organization(ctx, sel, obj)
	case models.Tenant:
		return ec._Tenant(ctx, sel, &obj)
	case *models.Tenant:
		return ec._Tenant(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

func UnmarshalAuthorizationInput(v interface{}) (models.AuthorizationInput, error) {
	var it models.AuthorizationInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "claimType":
			var err error
			err = (&it.ClaimType).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "claimMedium":
			var err error
			err = (&it.ClaimMedium).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "sessionID":
			var err error
			var ptr1 models.AuthenticatedSessionID
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.SessionID = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalPrivilegedAuthorizationInput(v interface{}) (models.PrivilegedAuthorizationInput, error) {
	var it models.PrivilegedAuthorizationInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "claimType":
			var err error
			err = (&it.ClaimType).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "claimMedium":
			var err error
			err = (&it.ClaimMedium).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "sessionID":
			var err error
			var ptr1 models.AuthenticatedSessionID
			if v != nil {
				err = (&ptr1).UnmarshalGQL(v)
				it.SessionID = &ptr1
			}

			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func UnmarshalStorageDestinationInput(v interface{}) (models.StorageDestinationInput, error) {
	var it models.StorageDestinationInput
	var asMap = v.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "collection":
			var err error
			err = (&it.Collection).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		case "key":
			var err error
			err = (&it.Key).UnmarshalGQL(v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) FieldMiddleware(ctx context.Context, next graphql.Resolver) interface{} {
	res, err := ec.ResolverMiddleware(ctx, next)
	if err != nil {
		ec.Error(ctx, err)
		return nil
	}
	return res
}

func (ec *executionContext) introspectSchema() *introspection.Schema {
	return introspection.WrapSchema(parsedSchema)
}

func (ec *executionContext) introspectType(name string) *introspection.Type {
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name])
}

var parsedSchema = gqlparser.MustLoadSchema(
	&ast.Source{Name: "schema.graphql", Input: `# Style Guide:
# * DO NOT USE LOOSE TYPES like string, int, etc. instead define scalars for everything where possible
#
# TODO Add [feature flags/toggles](https://martinfowler.com/articles/feature-toggles.html) data types and fields.
#      The models should help manage what fields should be turned on/off per tenant, time, authorization, etc.
# TODO Check to see where [union](https://graphql.org/learn/models/#union-types) objects make more sense than
#      interfaces and concrete types.
# TODO Create common [fragments](https://graphql.org/learn/queries/#fragments) for queries to ease the client side burden 
#      of typing in common fields and knowing all the various field names.
# TODO Install models linter and run for each build and before each git commit

scalar NameText
scalar SmallText
scalar MediumText
scalar LargeText
scalar ExtraLargeText

scalar AsymmetricCryptoPublicKey
scalar AsymmetricCryptoPublicKeyName
scalar AuthenticatedSessionID
scalar AuthenticatedSessionsCount
scalar URLText
scalar RegularExpression
scalar ErrorMessage

scalar IdentityPrincipal
scalar IdentityPassword
scalar IdentityKey

scalar StorageKey
scalar SettingsBundleName

scalar Document
scalar File
scalar FileNameOnly
scalar FilePathAndName
scalar DirectoryPath

scalar Date
scalar PastDate
scalar FutureDate
scalar DateTime
scalar PastDateTime
scalar FutureDateTime
scalar Timestamp

scalar AuthenticatedSessionTimeout

enum AuthorizationClaimType {
  SESSION_ID
  JWT
}

enum AuthorizationClaimMedium {
  HTTP_HEADER
  PARAM_VALUE  
}

enum AuthenticationType {
  SINGLE_FACTOR
}

enum AuthenticatedSessionType {
  EPHEMERAL
}

enum AuthenticatedSessionTmeoutType {
  SLIDING_WINDOW
  ABSOLUTE
}

interface AuthenticationIdentity {
  id: ID!
  type: AuthenticationType!
  principal: IdentityPrincipal!
}

interface AuthorizationClaimCryptoKey {
  claimType : AuthorizationClaimType!
  keyId : AsymmetricCryptoPublicKeyName!
  key : AsymmetricCryptoPublicKey!
}

interface AuthenticatedSession {
  claimType : AuthorizationClaimType!
  claimMedium : AuthorizationClaimMedium!
  claimKey : AuthorizationClaimCryptoKey
  sessionID: AuthenticatedSessionID!
  type: AuthenticatedSessionType!
  identity: AuthenticationIdentity!
  timeOutType : AuthenticatedSessionTmeoutType!
  timeOut: AuthenticatedSessionTimeout!
  settingsBundleName : SettingsBundleName
}

interface Party {
  id: ID!
  name: NameText!  
}

type Person implements Party {
  id: ID!
  name: NameText!
  firstName: NameText!
  lastName: NameText!
  users : [UserIdentity]
  services : [ServiceIdentity]
}

type UserIdentity implements AuthenticationIdentity {
  id: ID!
  type: AuthenticationType!
  principal: IdentityPrincipal!
  password : IdentityPassword!
  person: Person!
}

type ServiceIdentity implements AuthenticationIdentity {
  id: ID!
  type: AuthenticationType!
  principal: IdentityPrincipal!
  key : IdentityKey!
}

type OrganizationalUnit implements Party {
  id: ID!
  name: NameText!
  units: [OrganizationalUnit]
  services : [ServiceIdentity]
}

type Organization implements Party {
  id: ID!
  name: NameText!
  units: [OrganizationalUnit]
  services : [ServiceIdentity]
}

type Tenant implements Party {
  id: ID!
  name: NameText!
  org: Organization!
  #TODO add support for subtenants (in case our tenants want their own customers)
}

# StorageType enumerates the different kinds of storage Lectio supports
enum StorageType {
  FILE_SYSTEM
}

type FileStorageSettings {
  basePath : DirectoryPath!
}

type StorageSettings {
  type: StorageType!
  filesys : FileStorageSettings
}

type HarvestDirectivesSettings {
  ignoreURLsRegExprs : [RegularExpression]
  removeParamsFromURLsRegEx : [RegularExpression]
  followHTMLRedirects : Boolean!
}

type SettingsBundle {
  name : SettingsBundleName!
  storage: StorageSettings!
  harvest : HarvestDirectivesSettings!
  errors: [ErrorMessage]
}

type HarvestedResourceUrls {
  original : URLText!
  final : URLText!
  cleaned : URLText!
  resolved : URLText!
}

type HarvestedResource {
  urls : HarvestedResourceUrls!
  isHTMLRedirect : Boolean!
  isCleaned : Boolean!
  redirectURL : URLText
}

type IgnoredResource {
  urls : HarvestedResourceUrls!
  reason: SmallText!
}

type UnharvestedResource {
  url : URLText!
  reason: SmallText!
}

type HarvestedResources {
  text: LargeText!
  harvested: [HarvestedResource]
  ignored : [IgnoredResource]
  invalid : [UnharvestedResource]
}

input AuthorizationInput {
  claimType : AuthorizationClaimType!
  claimMedium : AuthorizationClaimMedium!
  sessionID: AuthenticatedSessionID
}

input PrivilegedAuthorizationInput {
  claimType : AuthorizationClaimType!
  claimMedium : AuthorizationClaimMedium!
  sessionID: AuthenticatedSessionID
}

enum StorageDestinationCollection {
  SESSION_PRINCIPAL
  SESSION_TENANT
}

input StorageDestinationInput {
  collection : StorageDestinationCollection!
  key: StorageKey!
}

type Query {
  asymmetricCryptoPublicKey(claimType : AuthorizationClaimType!, keyId : AsymmetricCryptoPublicKeyName!) : AuthorizationClaimCryptoKey
  asymmetricCryptoPublicKeys(claimType : AuthorizationClaimType) : [AuthorizationClaimCryptoKey]
  settingsBundles(authorization : PrivilegedAuthorizationInput!) : [SettingsBundle]
  settingsBundle(authorization : PrivilegedAuthorizationInput!, name : SettingsBundleName!): SettingsBundle
  urlsInText(authorization : AuthorizationInput!, text: LargeText!): HarvestedResources
}

type Mutation {
  establishSimulatedSession(authorization : PrivilegedAuthorizationInput!, settings : SettingsBundleName = "DEFAULT") : AuthenticatedSession
  refreshSession(privilegedAuthz : PrivilegedAuthorizationInput!, authorization : AuthorizationInput!) : AuthenticatedSession
  destroySession(privilegedAuthz : PrivilegedAuthorizationInput!, authorization : AuthorizationInput!) : Boolean!
  destroyAllSessions(authorization : PrivilegedAuthorizationInput!) : AuthenticatedSessionsCount!
  saveURLsinText(authorization : AuthorizationInput!, destination: StorageDestinationInput!, text : LargeText!) : HarvestedResources
}
`},
)
