// Code generated by github.com/vektah/gqlgen, DO NOT EDIT.

package schema_defn

import (
	fmt "fmt"
	io "io"
	strconv "strconv"
)

type AuthenticationIdentity interface{}
type AuthorizationClaimCryptoKey interface{}
type AuthorizationInput struct {
	ClaimType   AuthorizationClaimType   `json:"claimType"`
	ClaimMedium AuthorizationClaimMedium `json:"claimMedium"`
	SessionID   *AuthenticatedSessionID  `json:"sessionID"`
}
type FileStorageSettings struct {
	BasePath string `json:"basePath"`
}
type HarvestDirectivesSettings struct {
	IgnoreURLsRegExprs        []*RegularExpression `json:"ignoreURLsRegExprs"`
	RemoveParamsFromURLsRegEx []*RegularExpression `json:"removeParamsFromURLsRegEx"`
	FollowHTMLRedirects       bool                 `json:"followHTMLRedirects"`
}
type HarvestedResource struct {
	Urls           HarvestedResourceUrls `json:"urls"`
	IsHTMLRedirect bool                  `json:"isHTMLRedirect"`
	IsCleaned      bool                  `json:"isCleaned"`
	RedirectURL    *URLText              `json:"redirectURL"`
}
type HarvestedResourceUrls struct {
	Original URLText `json:"original"`
	Final    URLText `json:"final"`
	Cleaned  URLText `json:"cleaned"`
	Resolved URLText `json:"resolved"`
}
type HarvestedResources struct {
	Text      string                 `json:"text"`
	Harvested []*HarvestedResource   `json:"harvested"`
	Ignored   []*IgnoredResource     `json:"ignored"`
	Invalid   []*UnharvestedResource `json:"invalid"`
}
type IgnoredResource struct {
	Urls   HarvestedResourceUrls `json:"urls"`
	Reason string                `json:"reason"`
}
type Organization struct {
	ID       string                `json:"id"`
	Name     string                `json:"name"`
	Units    []*OrganizationalUnit `json:"units"`
	Services []*ServiceIdentity    `json:"services"`
}
type OrganizationalUnit struct {
	ID       string                `json:"id"`
	Name     string                `json:"name"`
	Units    []*OrganizationalUnit `json:"units"`
	Services []*ServiceIdentity    `json:"services"`
}
type Party interface{}
type Person struct {
	ID        string             `json:"id"`
	Name      string             `json:"name"`
	FirstName string             `json:"firstName"`
	LastName  string             `json:"lastName"`
	Users     []*UserIdentity    `json:"users"`
	Services  []*ServiceIdentity `json:"services"`
}
type PrivilegedAuthorizationInput struct {
	ClaimType   AuthorizationClaimType   `json:"claimType"`
	ClaimMedium AuthorizationClaimMedium `json:"claimMedium"`
	SessionID   *AuthenticatedSessionID  `json:"sessionID"`
}
type ServiceIdentity struct {
	ID        string             `json:"id"`
	Type      AuthenticationType `json:"type"`
	Principal IdentityPrincipal  `json:"principal"`
	Key       IdentityKey        `json:"key"`
}
type SettingsBundle struct {
	Name    SettingsBundleName        `json:"name"`
	Storage StorageSettings           `json:"storage"`
	Harvest HarvestDirectivesSettings `json:"harvest"`
	Errors  []*ErrorMessage           `json:"errors"`
}
type StorageDestinationInput struct {
	Collection StorageDestinationCollection `json:"collection"`
	Key        StorageKey                   `json:"key"`
}
type StorageSettings struct {
	Type    StorageType          `json:"type"`
	Filesys *FileStorageSettings `json:"filesys"`
}
type Tenant struct {
	ID   string       `json:"id"`
	Name string       `json:"name"`
	Org  Organization `json:"org"`
}
type UnharvestedResource struct {
	Url    URLText `json:"url"`
	Reason string  `json:"reason"`
}
type UserIdentity struct {
	ID        string             `json:"id"`
	Type      AuthenticationType `json:"type"`
	Principal IdentityPrincipal  `json:"principal"`
	Password  IdentityPassword   `json:"password"`
	Person    Person             `json:"person"`
}

type AuthenticatedSessionTmeoutType string

const (
	AuthenticatedSessionTmeoutTypeSlidingWindow AuthenticatedSessionTmeoutType = "SLIDING_WINDOW"
	AuthenticatedSessionTmeoutTypeAbsolute      AuthenticatedSessionTmeoutType = "ABSOLUTE"
)

func (e AuthenticatedSessionTmeoutType) IsValid() bool {
	switch e {
	case AuthenticatedSessionTmeoutTypeSlidingWindow, AuthenticatedSessionTmeoutTypeAbsolute:
		return true
	}
	return false
}

func (e AuthenticatedSessionTmeoutType) String() string {
	return string(e)
}

func (e *AuthenticatedSessionTmeoutType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthenticatedSessionTmeoutType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthenticatedSessionTmeoutType", str)
	}
	return nil
}

func (e AuthenticatedSessionTmeoutType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthenticatedSessionType string

const (
	AuthenticatedSessionTypeEphemeral AuthenticatedSessionType = "EPHEMERAL"
)

func (e AuthenticatedSessionType) IsValid() bool {
	switch e {
	case AuthenticatedSessionTypeEphemeral:
		return true
	}
	return false
}

func (e AuthenticatedSessionType) String() string {
	return string(e)
}

func (e *AuthenticatedSessionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthenticatedSessionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthenticatedSessionType", str)
	}
	return nil
}

func (e AuthenticatedSessionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthenticationType string

const (
	AuthenticationTypeSingleFactor AuthenticationType = "SINGLE_FACTOR"
)

func (e AuthenticationType) IsValid() bool {
	switch e {
	case AuthenticationTypeSingleFactor:
		return true
	}
	return false
}

func (e AuthenticationType) String() string {
	return string(e)
}

func (e *AuthenticationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthenticationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthenticationType", str)
	}
	return nil
}

func (e AuthenticationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthorizationClaimMedium string

const (
	AuthorizationClaimMediumHttpHeader AuthorizationClaimMedium = "HTTP_HEADER"
	AuthorizationClaimMediumParamValue AuthorizationClaimMedium = "PARAM_VALUE"
)

func (e AuthorizationClaimMedium) IsValid() bool {
	switch e {
	case AuthorizationClaimMediumHttpHeader, AuthorizationClaimMediumParamValue:
		return true
	}
	return false
}

func (e AuthorizationClaimMedium) String() string {
	return string(e)
}

func (e *AuthorizationClaimMedium) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthorizationClaimMedium(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthorizationClaimMedium", str)
	}
	return nil
}

func (e AuthorizationClaimMedium) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AuthorizationClaimType string

const (
	AuthorizationClaimTypeSessionId AuthorizationClaimType = "SESSION_ID"
	AuthorizationClaimTypeJwt       AuthorizationClaimType = "JWT"
)

func (e AuthorizationClaimType) IsValid() bool {
	switch e {
	case AuthorizationClaimTypeSessionId, AuthorizationClaimTypeJwt:
		return true
	}
	return false
}

func (e AuthorizationClaimType) String() string {
	return string(e)
}

func (e *AuthorizationClaimType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthorizationClaimType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthorizationClaimType", str)
	}
	return nil
}

func (e AuthorizationClaimType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StorageDestinationCollection string

const (
	StorageDestinationCollectionSessionPrincipal StorageDestinationCollection = "SESSION_PRINCIPAL"
	StorageDestinationCollectionSessionTenant    StorageDestinationCollection = "SESSION_TENANT"
)

func (e StorageDestinationCollection) IsValid() bool {
	switch e {
	case StorageDestinationCollectionSessionPrincipal, StorageDestinationCollectionSessionTenant:
		return true
	}
	return false
}

func (e StorageDestinationCollection) String() string {
	return string(e)
}

func (e *StorageDestinationCollection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StorageDestinationCollection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StorageDestinationCollection", str)
	}
	return nil
}

func (e StorageDestinationCollection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StorageType string

const (
	StorageTypeFileSystem StorageType = "FILE_SYSTEM"
)

func (e StorageType) IsValid() bool {
	switch e {
	case StorageTypeFileSystem:
		return true
	}
	return false
}

func (e StorageType) String() string {
	return string(e)
}

func (e *StorageType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StorageType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StorageType", str)
	}
	return nil
}

func (e StorageType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
